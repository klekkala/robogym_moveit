// Generated by gencpp from file mir_actions/RelativeMoveResult.msg
// DO NOT EDIT!


#ifndef MIR_ACTIONS_MESSAGE_RELATIVEMOVERESULT_H
#define MIR_ACTIONS_MESSAGE_RELATIVEMOVERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace mir_actions
{
template <class ContainerAllocator>
struct RelativeMoveResult_
{
  typedef RelativeMoveResult_<ContainerAllocator> Type;

  RelativeMoveResult_()
    : end_state(0)
    , end_pose()  {
    }
  RelativeMoveResult_(const ContainerAllocator& _alloc)
    : end_state(0)
    , end_pose(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _end_state_type;
  _end_state_type end_state;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _end_pose_type;
  _end_pose_type end_pose;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNDEFINED)
  #undef UNDEFINED
#endif
#if defined(_WIN32) && defined(GOAL_REACHED)
  #undef GOAL_REACHED
#endif
#if defined(_WIN32) && defined(FAILED_TIMEOUT)
  #undef FAILED_TIMEOUT
#endif
#if defined(_WIN32) && defined(FAILED_COLLISION)
  #undef FAILED_COLLISION
#endif
#if defined(_WIN32) && defined(INVALID_GOAL)
  #undef INVALID_GOAL
#endif

  enum {
    UNDEFINED = 0,
    GOAL_REACHED = 1,
    FAILED_TIMEOUT = 2,
    FAILED_COLLISION = 3,
    INVALID_GOAL = 4,
  };


  typedef boost::shared_ptr< ::mir_actions::RelativeMoveResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_actions::RelativeMoveResult_<ContainerAllocator> const> ConstPtr;

}; // struct RelativeMoveResult_

typedef ::mir_actions::RelativeMoveResult_<std::allocator<void> > RelativeMoveResult;

typedef boost::shared_ptr< ::mir_actions::RelativeMoveResult > RelativeMoveResultPtr;
typedef boost::shared_ptr< ::mir_actions::RelativeMoveResult const> RelativeMoveResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_actions::RelativeMoveResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_actions::RelativeMoveResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_actions::RelativeMoveResult_<ContainerAllocator1> & lhs, const ::mir_actions::RelativeMoveResult_<ContainerAllocator2> & rhs)
{
  return lhs.end_state == rhs.end_state &&
    lhs.end_pose == rhs.end_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_actions::RelativeMoveResult_<ContainerAllocator1> & lhs, const ::mir_actions::RelativeMoveResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_actions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mir_actions::RelativeMoveResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_actions::RelativeMoveResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_actions::RelativeMoveResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_actions::RelativeMoveResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_actions::RelativeMoveResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_actions::RelativeMoveResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_actions::RelativeMoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ab76f998827a292a12dfe9047344676";
  }

  static const char* value(const ::mir_actions::RelativeMoveResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ab76f998827a292ULL;
  static const uint64_t static_value2 = 0xa12dfe9047344676ULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_actions::RelativeMoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_actions/RelativeMoveResult";
  }

  static const char* value(const ::mir_actions::RelativeMoveResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_actions::RelativeMoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result definition\n"
"int16 UNDEFINED = 0\n"
"int16 GOAL_REACHED = 1\n"
"int16 FAILED_TIMEOUT = 2\n"
"int16 FAILED_COLLISION = 3\n"
"int16 INVALID_GOAL = 4\n"
"int16 end_state\n"
"geometry_msgs/PoseStamped end_pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::mir_actions::RelativeMoveResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_actions::RelativeMoveResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.end_state);
      stream.next(m.end_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RelativeMoveResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_actions::RelativeMoveResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_actions::RelativeMoveResult_<ContainerAllocator>& v)
  {
    s << indent << "end_state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.end_state);
    s << indent << "end_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.end_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_ACTIONS_MESSAGE_RELATIVEMOVERESULT_H
